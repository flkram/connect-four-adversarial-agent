import numpy as np
import random
from enum import Enum

class Status(Enum):
    BLANK = ' '
    RED = 'R'
    YELLOW = 'Y'
    DRAW = 'D'
    ONGOING = 'O'

class Environment:
    def __init__(self):
        self.rows = 6
        self.cols = 7
        self.board = np.full((self.rows, self.cols), Status.BLANK)
        self.current_player = Status.YELLOW  # Yellow goes first
        self.game_status = Status.ONGOING
        
    def get_valid_moves(self):
        return [col for col in range(self.cols) if self.board[0][col] == Status.BLANK]
    
    def drop_piece(self, col):
        if col not in self.get_valid_moves():
            return False
            
        for row in reversed(range(self.rows)):
            if self.board[row][col] == Status.BLANK:
                self.board[row][col] = self.current_player
                self._check_game_status(row, col)
                self._switch_player()
                return True
        return False
    
    def _switch_player(self):
        self.current_player = Status.YELLOW if self.current_player == Status.RED else Status.RED
    
    def _check_game_status(self, row, col):
        player = self.board[row][col]
        
        directions = [
            (0, 1),  # Horizontal
            (1, 0),  # Vertical
            (1, 1),  # Diagonal down-right
            (1, -1)  # Diagonal down-left
        ]
        
        for dr, dc in directions:
            count = 1
            for i in [1, -1]:
                r, c = row + dr*i, col + dc*i
                while 0 <= r < self.rows and 0 <= c < self.cols:
                    if self.board[r][c] == player:
                        count += 1
                        r += dr*i
                        c += dc*i
                    else:
                        break
            if count >= 4:
                self.game_status = player
                return
                
        if len(self.get_valid_moves()) == 0:
            self.game_status = Status.DRAW
            
    def clone(self):
        cloned = Environment()
        cloned.board = np.copy(self.board)
        cloned.current_player = self.current_player
        cloned.game_status = self.game_status
        return cloned
    
    def print_board(self):
        print("\n".join(["|" + "|".join([cell.value for cell in row]) + "|" for row in self.board]))
        print("-" * (self.cols * 2 + 1))

class Robot:
    def get_action(self, env):
        raise NotImplementedError

class StudentRobot(Robot):
    def get_action(self, env):
        valid_moves = env.get_valid_moves()
        
        # Check for immediate win
        for move in valid_moves:
            cloned = env.clone()
            if cloned.drop_piece(move) and cloned.game_status == env.current_player:
                return move
                
        # Block opponent win
        opponent = Status.YELLOW if env.current_player == Status.RED else Status.RED
        for move in valid_moves:
            cloned = env.clone()
            cloned.current_player = opponent
            if cloned.drop_piece(move) and cloned.game_status == opponent:
                return move
                
        # Minimax with alpha-beta pruning
        _, best_move = self.minimax(env.clone(), depth=4, alpha=-float('inf'), beta=float('inf'), maximizing=True)
        return best_move or random.choice(valid_moves)
    
    def minimax(self, env, depth, alpha, beta, maximizing):
        if depth == 0 or env.game_status != Status.ONGOING:
            return 0, None
            
        valid_moves = env.get_valid_moves()
        best_value = -float('inf') if maximizing else float('inf')
        best_move = None
        
        for move in valid_moves:
            cloned = env.clone()
            cloned.drop_piece(move)
            
            if maximizing:
                value, _ = self.minimax(cloned, depth-1, alpha, beta, False)
                if value > best_value:
                    best_value = value
                    best_move = move
                alpha = max(alpha, best_value)
            else:
                value, _ = self.minimax(cloned, depth-1, alpha, beta, True)
                if value < best_value:
                    best_value = value
                    best_move = move
                beta = min(beta, best_value)
            
            if alpha >= beta:
                break
                
        return best_value, best_move
    
    def evaluate(self, env):
        # Immediate win/loss/draw detection
        if env[env.game_status] == self:
            return 10000
        if env.game_status != Status.ONGOING:
            return -10000 if env.game_status != Status.DRAW else 0

        score = 0
        opponent = Status.YELLOW if self.role == Status.RED else Status.RED
        
        # Potential line evaluation
        for target, weight in [(3, 100), (2, 10), (1, 1)]:
            player_pot = self._count_potential(env.board, self.role, target)
            opp_pot = self._count_potential(env.board, opponent, target)
            score += player_pot * weight
            score -= opp_pot * weight

        # Center control bonus (columns 2, 3, 4)
        for row in range(env.rows):
            for col in [2, 3, 4]:
                if env.board[row][col] == self.role:
                    score += 2
                    
        return score

    def _count_potential(self, board, player, target):
        count = 0
        rows, cols = board.shape
        
        # Horizontal
        for r in range(rows):
            for c in range(cols - 3):
                line = [board[r][c+i] for i in range(4)]
                p_count = sum(1 for cell in line if cell == player)
                blanks = sum(1 for cell in line if cell == Status.BLANK)
                if p_count + blanks == 4 and p_count == target:
                    count += 1

        # Vertical
        for c in range(cols):
            for r in range(rows - 3):
                line = [board[r+i][c] for i in range(4)]
                p_count = sum(1 for cell in line if cell == player)
                blanks = sum(1 for cell in line if cell == Status.BLANK)
                if p_count + blanks == 4 and p_count == target:
                    count += 1

        # Diagonal (down-right)
        for r in range(rows - 3):
            for c in range(cols - 3):
                line = [board[r+i][c+i] for i in range(4)]
                p_count = sum(1 for cell in line if cell == player)
                blanks = sum(1 for cell in line if cell == Status.BLANK)
                if p_count + blanks == 4 and p_count == target:
                    count += 1

        # Diagonal (up-right)
        for r in range(3, rows):
            for c in range(cols - 3):
                line = [board[r-i][c+i] for i in range(4)]
                p_count = sum(1 for cell in line if cell == player)
                blanks = sum(1 for cell in line if cell == Status.BLANK)
                if p_count + blanks == 4 and p_count == target:
                    count += 1

        return count

class RandomRobot(Robot):
    def get_action(self, env):
        return random.choice(env.get_valid_moves())

class SimulationRunner:
        
    def run(Robots, VisualizeSimulation=False):
        env = Environment()
        while env.game_status == Status.ONGOING:
            current_Robot = Robots[env.current_player]
            action = current_Robot.get_action(env)
            env.drop_piece(action)
            
            if VisualizeSimulation:
                print(f"Player {env.current_player} placed in column {action}")
                env.print_board()
        print(f"Game result: {env.game_status} wins!")        
        return env.game_status
    
    def run_trials(Robots, trials):
        results = {Status.YELLOW: 0, Status.RED: 0, Status.DRAW: 0}
        for _ in range(trials):
            result = SimulationRunner.run(Robots, False)
            results[result] += 1
        return results



#---------Running Simulation with Visualization:

SimulationRunner.run( { Status.YELLOW: StudentRobot(), Status.RED: RandomRobot() } , VisualizeSimulation=True)



#---------Running Simulation with Trials:

#Robots = { Status.YELLOW: StudentRobot(), Status.RED: RandomRobot() }
#results = SimulationRunner.run_trials(Robots, 100)
#print(f"Wins: {results[Status.YELLOW]} Losses: {results[Status.RED]} Draws: {results[Status.DRAW]}")